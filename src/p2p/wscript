# -*- Mode: python; py-indent-offset: 4; indent-tabs-mode: nil; coding: utf-8; -*-

# def options(opt):
#     pass

# def configure(conf):
#     conf.check_nonfatal(header_name='stdint.h', define_name='HAVE_STDINT_H')

import os
import os.path

REQUIRED_BOOST_LIBS = ['system', 'signals', 'filesystem', 'thread', 'atomic', 'chrono', 'context', 'mpi', 'timer', ]

def required_boost_libs(conf):
    conf.env['REQUIRED_BOOST_LIBS'] += REQUIRED_BOOST_LIBS

def configure(conf):
    if not conf.env['LIB_BOOST']:
	conf.report_optional_feature("p2p", "NS-3 p2p Integration", False,
				     "Required boost libraries not found")

        # Add this module to the list of modules that won't be built
        # if they are enabled.
        conf.env['MODULES_NOT_BUILT'].append('p2p')

	return 
	conf.report_optional_feature("p2p", "NS-3 p2p Integration", False,
				     "Required boost libraries not found")

#    env = conf.env.derive()
 #   env.append_value('CXXFLAGS', '-lboost_system')
    present_boost_libs = []
    for boost_lib_name in conf.env['LIB_BOOST']:
        if boost_lib_name.startswith("boost_"):
            boost_lib_name = boost_lib_name[6:]
        if boost_lib_name.endswith("-mt"):
            boost_lib_name = boost_lib_name[:-3]
        present_boost_libs.append(boost_lib_name)

    missing_boost_libs = [lib for lib in REQUIRED_BOOST_LIBS if lib not in present_boost_libs]
    if missing_boost_libs != []:
	conf.report_optional_feature("p2pclient", "NS-3 p2p client", False,
				     "Required boost libraries not found, missing: %s" % ', '.join(missing_boost_libs))

        # Add this module to the list of modules that won't be built
        # if they are enabled.
        conf.env['MODULES_NOT_BUILT'].append('p2p')

	return 

def build(bld):
    module = bld.create_ns3_module('p2p', ['core', 'internet', 'config-store', 'tools', 'applications' ])

    moduleName = 'p2p'
    curPath = os.path.abspath('.')
    path = curPath + '/src/' + moduleName + '/'
    os.chdir(path)

    # 自动寻找目录下所有的源文件和头文件
    source = pathFind('model/', ('.cc', '.cpp'), [], 'test/')
    source = pathFind('helper/', ('.cc', '.cpp'), source, 'test/')
    header = pathFind('model/', ('.h', '.hpp'), [], 'ww')
    header = pathFind('helper/', ('.h', '.hpp'), header, 'ww')
    header = pathFindPre('model/libtorrent/', ('.h, .hpp'), header, 'wewe', 'libtorrent/')
    header = pathFindPre('model/libtorrent/aux_', ('.h, .hpp'), header, 'wewe', 'libtorrent/aux_')

    os.chdir(curPath)

    module.includes='. model/'
    module.source = source

    headers = bld(features='ns3header')
    headers.module = 'p2p'
    headers.source = header
    headers.includes='. model/'

    if bld.env.ENABLE_EXAMPLES:
        bld.recurse('examples')

    applications_test = bld.create_ns3_module_test_library('applications')
    applications_test.source = [
                    'test/libtorrent-test.cc',
                    ]
    applications_test.includes='. model/'
    # bld.ns3_python_bindings()

def pathFind(rootDir, endtype, fileEntry, excepPath):

    for lists in os.listdir(rootDir):
        path = os.path.join(rootDir, lists)

        if path.startswith(excepPath):
            continue

        if path.endswith(endtype):
            fileEntry.append(path)
    return fileEntry

def pathFindPre(rootDir, endtype, fileEntry, excepPath, Pre):
    for lists in os.listdir(rootDir):
        path = os.path.join(rootDir, lists)

        if path.startswith(excepPath):
            continue

        if path.endswith('hpp'):
            fileEntry.append(path)
    return fileEntry
